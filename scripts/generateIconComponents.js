const glob = require('glob');
const fs = require('fs-extra');
const path = require('path');
const lowerCase = require('lodash/lowerCase');

const SRC_DIR = '../node_modules/@rsuite/icon-font/lib';
const DIST_DIR = '../src/icons';

const resolvePath = (...paths) => path.resolve(__dirname, ...paths);

/**
 * Writes the component content to a file.
 * @param {string} componentName - The name of the component.
 * @param {string} categoryName - The category of the component.
 * @param {boolean} isLegacy - Whether the component is in the legacy category.
 */
const writeComponentFile = (componentName, categoryName, isLegacy) => {
  const componentPath = resolvePath(DIST_DIR, isLegacy ? 'legacy' : '', `${componentName}.tsx`);
  const relativeSvgImport = isLegacy ? '../../createSvgIcon' : '../createSvgIcon';
  const svgImportPath = `@rsuite/icon-font/lib/${categoryName}/${componentName}`;

  const content = `// Generated by script, don't edit it please.
import createSvgIcon from '${relativeSvgImport}';
import ${componentName}Svg from '${svgImportPath}';

const ${componentName} = createSvgIcon({
  as: ${componentName}Svg,
  ariaLabel: '${lowerCase(componentName)}',
  category: '${categoryName}',
  displayName: '${componentName}'
});

export default ${componentName};
`;

  fs.outputFileSync(componentPath, content);
};

/**
 * Writes the index.ts or legacy/index.ts file with the export statements for all components.
 * @param {string[]} componentNames - List of component names.
 * @param {boolean} isLegacy - Whether to write the legacy index file.
 */
const writeIndexFile = (componentNames, isLegacy = false) => {
  const content = componentNames
    .map(name => `export { default as ${name} } from './${name}';`)
    .join('\n');

  const indexPath = resolvePath(DIST_DIR, isLegacy ? 'legacy/index.ts' : 'index.ts');
  const header = `// Generated by script, don't edit it please.\n`;

  fs.outputFileSync(indexPath, header + content + '\n');
};

/**
 * Main function to generate all icon components and index files.
 */
module.exports = function generateIconComponents() {
  const files = glob.sync(resolvePath(`${SRC_DIR}/**/*.js`));
  const icons = [];
  const legacyIcons = [];

  files.forEach((svgPath, index) => {
    const basename = path.basename(svgPath);
    const componentName = path.basename(basename, path.extname(basename));
    const categoryName = path.relative(resolvePath(SRC_DIR), path.dirname(svgPath));
    const isLegacy = categoryName === 'legacy';

    isLegacy ? legacyIcons.push(componentName) : icons.push(componentName);
    console.log(`(${index + 1}/${files.length}) Generating ${componentName}.tsx ...`);

    try {
      writeComponentFile(componentName, categoryName, isLegacy);
    } catch (error) {
      console.error(`Error generating ${componentName}:`, error);
    }
  });

  try {
    writeIndexFile(icons);
    writeIndexFile(legacyIcons, true);
  } catch (error) {
    console.error('Error writing index files:', error);
  }
};
